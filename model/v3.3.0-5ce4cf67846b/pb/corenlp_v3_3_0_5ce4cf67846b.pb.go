// gocorenlp.  A Go (Golang) client for Stanford CoreNLP server.
// Copyright (C) 2022  Yuan Gao
//
// This file is part of gocorenlp.
//
// gocorenlp is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

//
// This file defines the ProtoBuf messages used by Stanford CoreNLP.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: corenlp_v3_3_0_5ce4cf67846b.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text       *string       `protobuf:"bytes,1,req,name=text" json:"text,omitempty"`
	Token      []*Token      `protobuf:"bytes,2,rep,name=token" json:"token,omitempty"`
	Sentence   []*Sentence   `protobuf:"bytes,3,rep,name=sentence" json:"sentence,omitempty"`
	CorefChain []*CorefChain `protobuf:"bytes,4,rep,name=corefChain" json:"corefChain,omitempty"`
	DocID      *string       `protobuf:"bytes,5,opt,name=docID" json:"docID,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Document) GetToken() []*Token {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *Document) GetSentence() []*Sentence {
	if x != nil {
		return x.Sentence
	}
	return nil
}

func (x *Document) GetCorefChain() []*CorefChain {
	if x != nil {
		return x.CorefChain
	}
	return nil
}

func (x *Document) GetDocID() string {
	if x != nil && x.DocID != nil {
		return *x.DocID
	}
	return ""
}

//
// The serialized version of a CoreMap representing a sentence.
//
type Sentence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenOffsetBegin                 *uint32          `protobuf:"varint,1,req,name=tokenOffsetBegin" json:"tokenOffsetBegin,omitempty"`
	TokenOffsetEnd                   *uint32          `protobuf:"varint,2,req,name=tokenOffsetEnd" json:"tokenOffsetEnd,omitempty"`
	SentenceIndex                    *uint32          `protobuf:"varint,3,opt,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	CharacterOffsetBegin             *uint32          `protobuf:"varint,4,opt,name=characterOffsetBegin" json:"characterOffsetBegin,omitempty"`
	CharacterOffsetEnd               *uint32          `protobuf:"varint,5,opt,name=characterOffsetEnd" json:"characterOffsetEnd,omitempty"`
	ParseTree                        *ParseTree       `protobuf:"bytes,6,opt,name=parseTree" json:"parseTree,omitempty"`
	BasicDependencies                *DependencyGraph `protobuf:"bytes,7,opt,name=basicDependencies" json:"basicDependencies,omitempty"`
	CollapsedDependencies            *DependencyGraph `protobuf:"bytes,8,opt,name=collapsedDependencies" json:"collapsedDependencies,omitempty"`
	CollapsedCCProcessedDependencies *DependencyGraph `protobuf:"bytes,9,opt,name=collapsedCCProcessedDependencies" json:"collapsedCCProcessedDependencies,omitempty"`
	Paragraph                        *uint32          `protobuf:"varint,10,opt,name=paragraph" json:"paragraph,omitempty"`
	// Fields set by other annotators in CoreNLP
	HasRelationAnnotations *bool       `protobuf:"varint,101,opt,name=hasRelationAnnotations" json:"hasRelationAnnotations,omitempty"`
	Entity                 []*Entity   `protobuf:"bytes,102,rep,name=entity" json:"entity,omitempty"`
	Relation               []*Relation `protobuf:"bytes,103,rep,name=relation" json:"relation,omitempty"`
}

func (x *Sentence) Reset() {
	*x = Sentence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sentence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sentence) ProtoMessage() {}

func (x *Sentence) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sentence.ProtoReflect.Descriptor instead.
func (*Sentence) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{1}
}

func (x *Sentence) GetTokenOffsetBegin() uint32 {
	if x != nil && x.TokenOffsetBegin != nil {
		return *x.TokenOffsetBegin
	}
	return 0
}

func (x *Sentence) GetTokenOffsetEnd() uint32 {
	if x != nil && x.TokenOffsetEnd != nil {
		return *x.TokenOffsetEnd
	}
	return 0
}

func (x *Sentence) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *Sentence) GetCharacterOffsetBegin() uint32 {
	if x != nil && x.CharacterOffsetBegin != nil {
		return *x.CharacterOffsetBegin
	}
	return 0
}

func (x *Sentence) GetCharacterOffsetEnd() uint32 {
	if x != nil && x.CharacterOffsetEnd != nil {
		return *x.CharacterOffsetEnd
	}
	return 0
}

func (x *Sentence) GetParseTree() *ParseTree {
	if x != nil {
		return x.ParseTree
	}
	return nil
}

func (x *Sentence) GetBasicDependencies() *DependencyGraph {
	if x != nil {
		return x.BasicDependencies
	}
	return nil
}

func (x *Sentence) GetCollapsedDependencies() *DependencyGraph {
	if x != nil {
		return x.CollapsedDependencies
	}
	return nil
}

func (x *Sentence) GetCollapsedCCProcessedDependencies() *DependencyGraph {
	if x != nil {
		return x.CollapsedCCProcessedDependencies
	}
	return nil
}

func (x *Sentence) GetParagraph() uint32 {
	if x != nil && x.Paragraph != nil {
		return *x.Paragraph
	}
	return 0
}

func (x *Sentence) GetHasRelationAnnotations() bool {
	if x != nil && x.HasRelationAnnotations != nil {
		return *x.HasRelationAnnotations
	}
	return false
}

func (x *Sentence) GetEntity() []*Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Sentence) GetRelation() []*Relation {
	if x != nil {
		return x.Relation
	}
	return nil
}

//
// The serialized version of a Token (a CoreLabel).
//
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fields set by the default annotators [new CoreNLP(new Properties())]
	Word            *string  `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`                         // the word's gloss (post-tokenization)
	Pos             *string  `protobuf:"bytes,2,opt,name=pos" json:"pos,omitempty"`                           // The word's part of speech tag
	Value           *string  `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`                       // The word's 'value', (e.g., parse tree node)
	Category        *string  `protobuf:"bytes,4,opt,name=category" json:"category,omitempty"`                 // The word's 'category' (e.g., parse tree node)
	Before          *string  `protobuf:"bytes,5,opt,name=before" json:"before,omitempty"`                     // The whitespace/xml before the token
	After           *string  `protobuf:"bytes,6,opt,name=after" json:"after,omitempty"`                       // The whitespace/xml after the token
	OriginalText    *string  `protobuf:"bytes,7,opt,name=originalText" json:"originalText,omitempty"`         // The original text for this token
	Ner             *string  `protobuf:"bytes,8,opt,name=ner" json:"ner,omitempty"`                           // The word's NER tag
	NormalizedNER   *string  `protobuf:"bytes,9,opt,name=normalizedNER" json:"normalizedNER,omitempty"`       // The word's normalized NER tag
	Lemma           *string  `protobuf:"bytes,10,opt,name=lemma" json:"lemma,omitempty"`                      // The word's lemma
	BeginChar       *uint32  `protobuf:"varint,11,opt,name=beginChar" json:"beginChar,omitempty"`             // The character offset begin
	EndChar         *uint32  `protobuf:"varint,12,opt,name=endChar" json:"endChar,omitempty"`                 // The character offset end
	Utterance       *uint32  `protobuf:"varint,13,opt,name=utterance" json:"utterance,omitempty"`             // The utterance tag used in dcoref
	Speaker         *string  `protobuf:"bytes,14,opt,name=speaker" json:"speaker,omitempty"`                  // The speaker speaking this word
	BeginIndex      *uint32  `protobuf:"varint,15,opt,name=beginIndex" json:"beginIndex,omitempty"`           // The begin index of, e.g., a span
	EndIndex        *uint32  `protobuf:"varint,16,opt,name=endIndex" json:"endIndex,omitempty"`               // The begin index of, e.g., a span
	TokenBeginIndex *uint32  `protobuf:"varint,17,opt,name=tokenBeginIndex" json:"tokenBeginIndex,omitempty"` // The begin index of the token
	TokenEndIndex   *uint32  `protobuf:"varint,18,opt,name=tokenEndIndex" json:"tokenEndIndex,omitempty"`     // The end index of the token
	TimexValue      *Timex   `protobuf:"bytes,19,opt,name=timexValue" json:"timexValue,omitempty"`            // The time this word refers to
	HasXmlContext   *bool    `protobuf:"varint,21,opt,name=hasXmlContext" json:"hasXmlContext,omitempty"`     // Used by clean xml annotator
	XmlContext      []string `protobuf:"bytes,22,rep,name=xmlContext" json:"xmlContext,omitempty"`            // Used by clean xml annotator
	CorefClusterID  *uint32  `protobuf:"varint,23,opt,name=corefClusterID" json:"corefClusterID,omitempty"`   // The [primary] cluster id for this token
	Answer          *string  `protobuf:"bytes,24,opt,name=answer" json:"answer,omitempty"`                    // A temporary annotation which is occasionally left in
	// Fields set by other annotators in CoreNLP
	Gender       *string `protobuf:"bytes,101,opt,name=gender" json:"gender,omitempty"`             // gender annotation (machine reading)
	TrueCase     *string `protobuf:"bytes,102,opt,name=trueCase" json:"trueCase,omitempty"`         // true case type of token
	TrueCaseText *string `protobuf:"bytes,103,opt,name=trueCaseText" json:"trueCaseText,omitempty"` // true case gloss of token
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{2}
}

func (x *Token) GetWord() string {
	if x != nil && x.Word != nil {
		return *x.Word
	}
	return ""
}

func (x *Token) GetPos() string {
	if x != nil && x.Pos != nil {
		return *x.Pos
	}
	return ""
}

func (x *Token) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Token) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *Token) GetBefore() string {
	if x != nil && x.Before != nil {
		return *x.Before
	}
	return ""
}

func (x *Token) GetAfter() string {
	if x != nil && x.After != nil {
		return *x.After
	}
	return ""
}

func (x *Token) GetOriginalText() string {
	if x != nil && x.OriginalText != nil {
		return *x.OriginalText
	}
	return ""
}

func (x *Token) GetNer() string {
	if x != nil && x.Ner != nil {
		return *x.Ner
	}
	return ""
}

func (x *Token) GetNormalizedNER() string {
	if x != nil && x.NormalizedNER != nil {
		return *x.NormalizedNER
	}
	return ""
}

func (x *Token) GetLemma() string {
	if x != nil && x.Lemma != nil {
		return *x.Lemma
	}
	return ""
}

func (x *Token) GetBeginChar() uint32 {
	if x != nil && x.BeginChar != nil {
		return *x.BeginChar
	}
	return 0
}

func (x *Token) GetEndChar() uint32 {
	if x != nil && x.EndChar != nil {
		return *x.EndChar
	}
	return 0
}

func (x *Token) GetUtterance() uint32 {
	if x != nil && x.Utterance != nil {
		return *x.Utterance
	}
	return 0
}

func (x *Token) GetSpeaker() string {
	if x != nil && x.Speaker != nil {
		return *x.Speaker
	}
	return ""
}

func (x *Token) GetBeginIndex() uint32 {
	if x != nil && x.BeginIndex != nil {
		return *x.BeginIndex
	}
	return 0
}

func (x *Token) GetEndIndex() uint32 {
	if x != nil && x.EndIndex != nil {
		return *x.EndIndex
	}
	return 0
}

func (x *Token) GetTokenBeginIndex() uint32 {
	if x != nil && x.TokenBeginIndex != nil {
		return *x.TokenBeginIndex
	}
	return 0
}

func (x *Token) GetTokenEndIndex() uint32 {
	if x != nil && x.TokenEndIndex != nil {
		return *x.TokenEndIndex
	}
	return 0
}

func (x *Token) GetTimexValue() *Timex {
	if x != nil {
		return x.TimexValue
	}
	return nil
}

func (x *Token) GetHasXmlContext() bool {
	if x != nil && x.HasXmlContext != nil {
		return *x.HasXmlContext
	}
	return false
}

func (x *Token) GetXmlContext() []string {
	if x != nil {
		return x.XmlContext
	}
	return nil
}

func (x *Token) GetCorefClusterID() uint32 {
	if x != nil && x.CorefClusterID != nil {
		return *x.CorefClusterID
	}
	return 0
}

func (x *Token) GetAnswer() string {
	if x != nil && x.Answer != nil {
		return *x.Answer
	}
	return ""
}

func (x *Token) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *Token) GetTrueCase() string {
	if x != nil && x.TrueCase != nil {
		return *x.TrueCase
	}
	return ""
}

func (x *Token) GetTrueCaseText() string {
	if x != nil && x.TrueCaseText != nil {
		return *x.TrueCaseText
	}
	return ""
}

//
// A syntactic parse tree, with scores.
//
type ParseTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child           []*ParseTree `protobuf:"bytes,1,rep,name=child" json:"child,omitempty"`
	Value           *string      `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	YieldBeginIndex *uint32      `protobuf:"varint,3,opt,name=yieldBeginIndex" json:"yieldBeginIndex,omitempty"`
	YieldEndIndex   *uint32      `protobuf:"varint,4,opt,name=yieldEndIndex" json:"yieldEndIndex,omitempty"`
	Score           *float64     `protobuf:"fixed64,5,opt,name=score" json:"score,omitempty"`
}

func (x *ParseTree) Reset() {
	*x = ParseTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseTree) ProtoMessage() {}

func (x *ParseTree) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseTree.ProtoReflect.Descriptor instead.
func (*ParseTree) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{3}
}

func (x *ParseTree) GetChild() []*ParseTree {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *ParseTree) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *ParseTree) GetYieldBeginIndex() uint32 {
	if x != nil && x.YieldBeginIndex != nil {
		return *x.YieldBeginIndex
	}
	return 0
}

func (x *ParseTree) GetYieldEndIndex() uint32 {
	if x != nil && x.YieldEndIndex != nil {
		return *x.YieldEndIndex
	}
	return 0
}

func (x *ParseTree) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

//
// A dependency graph representation.
//
type DependencyGraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node []*DependencyGraph_Node `protobuf:"bytes,1,rep,name=node" json:"node,omitempty"`
	Edge []*DependencyGraph_Edge `protobuf:"bytes,2,rep,name=edge" json:"edge,omitempty"`
	Root []uint32                `protobuf:"varint,3,rep,name=root" json:"root,omitempty"`
}

func (x *DependencyGraph) Reset() {
	*x = DependencyGraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyGraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyGraph) ProtoMessage() {}

func (x *DependencyGraph) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyGraph.ProtoReflect.Descriptor instead.
func (*DependencyGraph) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{4}
}

func (x *DependencyGraph) GetNode() []*DependencyGraph_Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *DependencyGraph) GetEdge() []*DependencyGraph_Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (x *DependencyGraph) GetRoot() []uint32 {
	if x != nil {
		return x.Root
	}
	return nil
}

//
// A coreference chain.
// These fields are not *really* optional. CoreNLP will crash without them.
//
type CorefChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID        *int32                     `protobuf:"varint,1,req,name=chainID" json:"chainID,omitempty"`
	Mention        []*CorefChain_CorefMention `protobuf:"bytes,2,rep,name=mention" json:"mention,omitempty"`
	Representative *uint32                    `protobuf:"varint,3,req,name=representative" json:"representative,omitempty"`
}

func (x *CorefChain) Reset() {
	*x = CorefChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorefChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorefChain) ProtoMessage() {}

func (x *CorefChain) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorefChain.ProtoReflect.Descriptor instead.
func (*CorefChain) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{5}
}

func (x *CorefChain) GetChainID() int32 {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return 0
}

func (x *CorefChain) GetMention() []*CorefChain_CorefMention {
	if x != nil {
		return x.Mention
	}
	return nil
}

func (x *CorefChain) GetRepresentative() uint32 {
	if x != nil && x.Representative != nil {
		return *x.Representative
	}
	return 0
}

//
// A Timex object, representing a temporal expression (TIMe EXpression)
// These fields are not *really* optional. CoreNLP will crash without them.
//
type Timex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      *string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	AltValue   *string `protobuf:"bytes,2,opt,name=altValue" json:"altValue,omitempty"`
	Text       *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
	Type       *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Tid        *string `protobuf:"bytes,5,opt,name=tid" json:"tid,omitempty"`
	BeginPoint *uint32 `protobuf:"varint,6,opt,name=beginPoint" json:"beginPoint,omitempty"`
	EndPoint   *uint32 `protobuf:"varint,7,opt,name=endPoint" json:"endPoint,omitempty"`
}

func (x *Timex) Reset() {
	*x = Timex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timex) ProtoMessage() {}

func (x *Timex) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timex.ProtoReflect.Descriptor instead.
func (*Timex) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{6}
}

func (x *Timex) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

func (x *Timex) GetAltValue() string {
	if x != nil && x.AltValue != nil {
		return *x.AltValue
	}
	return ""
}

func (x *Timex) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Timex) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Timex) GetTid() string {
	if x != nil && x.Tid != nil {
		return *x.Tid
	}
	return ""
}

func (x *Timex) GetBeginPoint() uint32 {
	if x != nil && x.BeginPoint != nil {
		return *x.BeginPoint
	}
	return 0
}

func (x *Timex) GetEndPoint() uint32 {
	if x != nil && x.EndPoint != nil {
		return *x.EndPoint
	}
	return 0
}

//
// A representation of an entity in a relation.
// This corresponds to the EntityMention, and more broadly the
// ExtractionObject classes.
//
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadStart      *uint32 `protobuf:"varint,6,opt,name=headStart" json:"headStart,omitempty"`
	HeadEnd        *uint32 `protobuf:"varint,7,opt,name=headEnd" json:"headEnd,omitempty"`
	MentionType    *string `protobuf:"bytes,8,opt,name=mentionType" json:"mentionType,omitempty"`
	NormalizedName *string `protobuf:"bytes,9,opt,name=normalizedName" json:"normalizedName,omitempty"`
	HeadTokenIndex *uint32 `protobuf:"varint,10,opt,name=headTokenIndex" json:"headTokenIndex,omitempty"`
	CorefID        *string `protobuf:"bytes,11,opt,name=corefID" json:"corefID,omitempty"`
	// inherited from ExtractionObject
	ObjectID    *string `protobuf:"bytes,1,opt,name=objectID" json:"objectID,omitempty"`
	ExtentStart *uint32 `protobuf:"varint,2,opt,name=extentStart" json:"extentStart,omitempty"`
	ExtentEnd   *uint32 `protobuf:"varint,3,opt,name=extentEnd" json:"extentEnd,omitempty"`
	Type        *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Subtype     *string `protobuf:"bytes,5,opt,name=subtype" json:"subtype,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{7}
}

func (x *Entity) GetHeadStart() uint32 {
	if x != nil && x.HeadStart != nil {
		return *x.HeadStart
	}
	return 0
}

func (x *Entity) GetHeadEnd() uint32 {
	if x != nil && x.HeadEnd != nil {
		return *x.HeadEnd
	}
	return 0
}

func (x *Entity) GetMentionType() string {
	if x != nil && x.MentionType != nil {
		return *x.MentionType
	}
	return ""
}

func (x *Entity) GetNormalizedName() string {
	if x != nil && x.NormalizedName != nil {
		return *x.NormalizedName
	}
	return ""
}

func (x *Entity) GetHeadTokenIndex() uint32 {
	if x != nil && x.HeadTokenIndex != nil {
		return *x.HeadTokenIndex
	}
	return 0
}

func (x *Entity) GetCorefID() string {
	if x != nil && x.CorefID != nil {
		return *x.CorefID
	}
	return ""
}

func (x *Entity) GetObjectID() string {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return ""
}

func (x *Entity) GetExtentStart() uint32 {
	if x != nil && x.ExtentStart != nil {
		return *x.ExtentStart
	}
	return 0
}

func (x *Entity) GetExtentEnd() uint32 {
	if x != nil && x.ExtentEnd != nil {
		return *x.ExtentEnd
	}
	return 0
}

func (x *Entity) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Entity) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

//
// A representation of a relation, mirroring RelationMention
//
type Relation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgName   []string  `protobuf:"bytes,6,rep,name=argName" json:"argName,omitempty"`
	Arg       []*Entity `protobuf:"bytes,7,rep,name=arg" json:"arg,omitempty"`
	Signature *string   `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	// inherited from ExtractionObject
	ObjectID    *string `protobuf:"bytes,1,opt,name=objectID" json:"objectID,omitempty"`
	ExtentStart *uint32 `protobuf:"varint,2,opt,name=extentStart" json:"extentStart,omitempty"`
	ExtentEnd   *uint32 `protobuf:"varint,3,opt,name=extentEnd" json:"extentEnd,omitempty"`
	Type        *string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	Subtype     *string `protobuf:"bytes,5,opt,name=subtype" json:"subtype,omitempty"`
}

func (x *Relation) Reset() {
	*x = Relation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relation) ProtoMessage() {}

func (x *Relation) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relation.ProtoReflect.Descriptor instead.
func (*Relation) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{8}
}

func (x *Relation) GetArgName() []string {
	if x != nil {
		return x.ArgName
	}
	return nil
}

func (x *Relation) GetArg() []*Entity {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *Relation) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *Relation) GetObjectID() string {
	if x != nil && x.ObjectID != nil {
		return *x.ObjectID
	}
	return ""
}

func (x *Relation) GetExtentStart() uint32 {
	if x != nil && x.ExtentStart != nil {
		return *x.ExtentStart
	}
	return 0
}

func (x *Relation) GetExtentEnd() uint32 {
	if x != nil && x.ExtentEnd != nil {
		return *x.ExtentEnd
	}
	return 0
}

func (x *Relation) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Relation) GetSubtype() string {
	if x != nil && x.Subtype != nil {
		return *x.Subtype
	}
	return ""
}

type DependencyGraph_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentenceIndex  *uint32 `protobuf:"varint,1,req,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	Index          *uint32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	CopyAnnotation *uint32 `protobuf:"varint,3,opt,name=copyAnnotation" json:"copyAnnotation,omitempty"`
}

func (x *DependencyGraph_Node) Reset() {
	*x = DependencyGraph_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyGraph_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyGraph_Node) ProtoMessage() {}

func (x *DependencyGraph_Node) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyGraph_Node.ProtoReflect.Descriptor instead.
func (*DependencyGraph_Node) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DependencyGraph_Node) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *DependencyGraph_Node) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *DependencyGraph_Node) GetCopyAnnotation() uint32 {
	if x != nil && x.CopyAnnotation != nil {
		return *x.CopyAnnotation
	}
	return 0
}

type DependencyGraph_Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *uint32 `protobuf:"varint,1,req,name=source" json:"source,omitempty"`
	Target  *uint32 `protobuf:"varint,2,req,name=target" json:"target,omitempty"`
	Dep     *string `protobuf:"bytes,3,opt,name=dep" json:"dep,omitempty"`
	IsExtra *bool   `protobuf:"varint,4,opt,name=isExtra" json:"isExtra,omitempty"`
}

func (x *DependencyGraph_Edge) Reset() {
	*x = DependencyGraph_Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyGraph_Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyGraph_Edge) ProtoMessage() {}

func (x *DependencyGraph_Edge) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyGraph_Edge.ProtoReflect.Descriptor instead.
func (*DependencyGraph_Edge) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{4, 1}
}

func (x *DependencyGraph_Edge) GetSource() uint32 {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return 0
}

func (x *DependencyGraph_Edge) GetTarget() uint32 {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return 0
}

func (x *DependencyGraph_Edge) GetDep() string {
	if x != nil && x.Dep != nil {
		return *x.Dep
	}
	return ""
}

func (x *DependencyGraph_Edge) GetIsExtra() bool {
	if x != nil && x.IsExtra != nil {
		return *x.IsExtra
	}
	return false
}

type CorefChain_CorefMention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionID     *int32  `protobuf:"varint,1,opt,name=mentionID" json:"mentionID,omitempty"`
	MentionType   *string `protobuf:"bytes,2,opt,name=mentionType" json:"mentionType,omitempty"`
	Number        *string `protobuf:"bytes,3,opt,name=number" json:"number,omitempty"`
	Gender        *string `protobuf:"bytes,4,opt,name=gender" json:"gender,omitempty"`
	Animacy       *string `protobuf:"bytes,5,opt,name=animacy" json:"animacy,omitempty"`
	StartIndex    *uint32 `protobuf:"varint,6,opt,name=startIndex" json:"startIndex,omitempty"`
	EndIndex      *uint32 `protobuf:"varint,7,opt,name=endIndex" json:"endIndex,omitempty"`
	HeadIndex     *uint32 `protobuf:"varint,9,opt,name=headIndex" json:"headIndex,omitempty"`
	SentenceIndex *uint32 `protobuf:"varint,10,opt,name=sentenceIndex" json:"sentenceIndex,omitempty"`
	Position      *uint32 `protobuf:"varint,11,opt,name=position" json:"position,omitempty"` // the second element of position
}

func (x *CorefChain_CorefMention) Reset() {
	*x = CorefChain_CorefMention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorefChain_CorefMention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorefChain_CorefMention) ProtoMessage() {}

func (x *CorefChain_CorefMention) ProtoReflect() protoreflect.Message {
	mi := &file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorefChain_CorefMention.ProtoReflect.Descriptor instead.
func (*CorefChain_CorefMention) Descriptor() ([]byte, []int) {
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CorefChain_CorefMention) GetMentionID() int32 {
	if x != nil && x.MentionID != nil {
		return *x.MentionID
	}
	return 0
}

func (x *CorefChain_CorefMention) GetMentionType() string {
	if x != nil && x.MentionType != nil {
		return *x.MentionType
	}
	return ""
}

func (x *CorefChain_CorefMention) GetNumber() string {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return ""
}

func (x *CorefChain_CorefMention) GetGender() string {
	if x != nil && x.Gender != nil {
		return *x.Gender
	}
	return ""
}

func (x *CorefChain_CorefMention) GetAnimacy() string {
	if x != nil && x.Animacy != nil {
		return *x.Animacy
	}
	return ""
}

func (x *CorefChain_CorefMention) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetEndIndex() uint32 {
	if x != nil && x.EndIndex != nil {
		return *x.EndIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetHeadIndex() uint32 {
	if x != nil && x.HeadIndex != nil {
		return *x.HeadIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetSentenceIndex() uint32 {
	if x != nil && x.SentenceIndex != nil {
		return *x.SentenceIndex
	}
	return 0
}

func (x *CorefChain_CorefMention) GetPosition() uint32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

var File_corenlp_v3_3_0_5ce4cf67846b_proto protoreflect.FileDescriptor

var file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x5f, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30,
	0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x36, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c,
	0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35,
	0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x22, 0xcb, 0x02, 0x0a, 0x08,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x53, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69,
	0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37,
	0x38, 0x34, 0x36, 0x62, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x5c, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e,
	0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f,
	0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x62, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e,
	0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f,
	0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x63, 0x49, 0x44, 0x22, 0xe1, 0x07, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x45, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42,
	0x65, 0x67, 0x69, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x45, 0x6e, 0x64, 0x12, 0x5f, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63,
	0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f,
	0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62,
	0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x75, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f,
	0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65,
	0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x7d, 0x0a, 0x15,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69,
	0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37,
	0x38, 0x34, 0x36, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x20,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f,
	0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33,
	0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x43, 0x43, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x36, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x68, 0x61, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63,
	0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f,
	0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x5c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64,
	0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63,
	0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x06,
	0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4e, 0x45, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x45, 0x52, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x6d,
	0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x6d, 0x6d, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x74, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5d, 0x0a, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e,
	0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34,
	0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x78, 0x52, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x68, 0x61,
	0x73, 0x58, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x58, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x78, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x78, 0x6d, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x75, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x65, 0x43, 0x61, 0x73, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x57, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72,
	0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f,
	0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x65,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x79, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x24, 0x0a, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x0f,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12,
	0x60, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f,
	0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66,
	0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x60, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e,
	0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34,
	0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65,
	0x64, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x1a, 0x6a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x63,
	0x6f, 0x70, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x62, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64,
	0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0xf0, 0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x65,
	0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x69, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64,
	0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67, 0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63,
	0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x66,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x02, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x72, 0x65, 0x66, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x63, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xd6, 0x02, 0x0a,
	0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x66, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x03,
	0x61, 0x72, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2e, 0x67,
	0x6f, 0x63, 0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x76,
	0x33, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34,
	0x36, 0x62, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x6e, 0x79, 0x6f, 0x72, 0x69, 0x2f, 0x67, 0x6f, 0x63,
	0x6f, 0x72, 0x65, 0x6e, 0x6c, 0x70, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x33, 0x2e,
	0x33, 0x2e, 0x30, 0x2d, 0x35, 0x63, 0x65, 0x34, 0x63, 0x66, 0x36, 0x37, 0x38, 0x34, 0x36, 0x62,
	0x2f, 0x70, 0x62,
}

var (
	file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescOnce sync.Once
	file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescData = file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDesc
)

func file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescGZIP() []byte {
	file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescOnce.Do(func() {
		file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescData = protoimpl.X.CompressGZIP(file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescData)
	})
	return file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDescData
}

var file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_corenlp_v3_3_0_5ce4cf67846b_proto_goTypes = []interface{}{
	(*Document)(nil),                // 0: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Document
	(*Sentence)(nil),                // 1: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence
	(*Token)(nil),                   // 2: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Token
	(*ParseTree)(nil),               // 3: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.ParseTree
	(*DependencyGraph)(nil),         // 4: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph
	(*CorefChain)(nil),              // 5: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.CorefChain
	(*Timex)(nil),                   // 6: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Timex
	(*Entity)(nil),                  // 7: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Entity
	(*Relation)(nil),                // 8: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Relation
	(*DependencyGraph_Node)(nil),    // 9: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph.Node
	(*DependencyGraph_Edge)(nil),    // 10: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph.Edge
	(*CorefChain_CorefMention)(nil), // 11: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.CorefChain.CorefMention
}
var file_corenlp_v3_3_0_5ce4cf67846b_proto_depIdxs = []int32{
	2,  // 0: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Document.token:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Token
	1,  // 1: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Document.sentence:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence
	5,  // 2: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Document.corefChain:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.CorefChain
	3,  // 3: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence.parseTree:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.ParseTree
	4,  // 4: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence.basicDependencies:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph
	4,  // 5: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence.collapsedDependencies:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph
	4,  // 6: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence.collapsedCCProcessedDependencies:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph
	7,  // 7: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence.entity:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Entity
	8,  // 8: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Sentence.relation:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Relation
	6,  // 9: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Token.timexValue:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Timex
	3,  // 10: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.ParseTree.child:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.ParseTree
	9,  // 11: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph.node:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph.Node
	10, // 12: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph.edge:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.DependencyGraph.Edge
	11, // 13: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.CorefChain.mention:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.CorefChain.CorefMention
	7,  // 14: com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Relation.arg:type_name -> com.github.donyori.gocorenlp.model.v3_3_0_5ce4cf67846b.Entity
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_corenlp_v3_3_0_5ce4cf67846b_proto_init() }
func file_corenlp_v3_3_0_5ce4cf67846b_proto_init() {
	if File_corenlp_v3_3_0_5ce4cf67846b_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sentence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyGraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorefChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyGraph_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DependencyGraph_Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorefChain_CorefMention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_corenlp_v3_3_0_5ce4cf67846b_proto_goTypes,
		DependencyIndexes: file_corenlp_v3_3_0_5ce4cf67846b_proto_depIdxs,
		MessageInfos:      file_corenlp_v3_3_0_5ce4cf67846b_proto_msgTypes,
	}.Build()
	File_corenlp_v3_3_0_5ce4cf67846b_proto = out.File
	file_corenlp_v3_3_0_5ce4cf67846b_proto_rawDesc = nil
	file_corenlp_v3_3_0_5ce4cf67846b_proto_goTypes = nil
	file_corenlp_v3_3_0_5ce4cf67846b_proto_depIdxs = nil
}
